#include <SimpleTimer.h>
#define BLYNK_PRINT Serial    
#include <ESP8266WiFi.h>
#include <BlynkSimpleEsp8266.h>
WidgetLED PUMP(V0);
#include "DHT.h"
#include "ThingSpeak.h"

#define DHTPIN D4      // pin  DATA with D4
#define SOIL_MOIST_1_PIN A0 // pin A0 with A0
#define PUMP_PIN D1  // PUMP RELAY
#define DHTTYPE DHT11  
#define DRY_SOIL      68
#define WET_SOIL      90
#define TIME_PUMP_ON  15
#define READ_SOIL_HUM_TM  10L
#define READ_AIR_DATA_TM  2L  
#define SEND_UP_DATA_TM   10L
#define AUTO_CTRL_TM      60L
WiFiClient client;

char auth[] = "aernUFZXJ36PMinCvfg0-C4SVMYqzLQR";
char ssid[] = "RaghavRathi";
char pass[] = "raghav123@";
char pass{}
//int status= WL_IDLE_STATUS;
unsigned long myChannelNumber= 939487 ;
const char * myWriteAPIKey = "U1P08P0DS3ICW6HW";
const cahr * myWriteAPIKey= "UPQQQQ
float humDHT=0
int soilMoist"
float humDHT = 0;
float tempDHT = 0;
int soilMoist = 0;
boolean pumpStatus = 0;
int timePumpOn = 1;
long sampleTimingSeconds = 20;
long startTiming = 0;
long elapsedTime = 0;
SimpleTimer timer;
DHT dht(DHTPIN, DHTTYPE);
void setup() {
  pinMode(PUMP_PIN, OUTPUT);
  a 
 aplyCmd();
  Serial.begin(115200);
  dht.begin();    
  Blynk.begin( auth, ssid , pass );
  PUMP.off();
 startTimers();
 ThingSpeak.begin(client);
 
}
void loop() {
  ThingSpeak.setField(1,soilMoist);
  ThingSpeak.setField(2,humDHT);
  ThingSpeak.setField(3, tempDHT);
  ThingSpeak.writeFields(myChannelNumber, myWriteAPIKey);
  timer.run();
  Blynk.run();
}
BLYNK_WRITE(3)
{ 
  int i = param.asInt();
  if (i == 1)
  {
    pumpStatus = !pumpStatus;
    aplyCmd();
    pumpstatus= !pumpstatus;
    applyCmd();
void getSoilMoist(void)

  }
}
void getSoilMoist(void)
{
  int i = 0;
  soilMoisture_red 
  soilMoist = 0;
  for (i = 0; i < 10; i++)  //
  {
    soilMoist += analogRead(SOIL_MOIST_1_PIN);
    soil
    int i =0
    ThingSpeak.setField(2,humDHT)
    delay(20);
    soilMoist += analogRead(SOIL_MOIST_1_PIN)
    soilMoist analog read   
  }
  soilMoist = soilMoist / (i);
  soilMoist = map(soilMoist, 1023, 0, 0, 100);

}
void getDhtData(void)
{
tempDHT = dht.readTemperature();
  humDHT = dht.readHumidity();
  if (isnan(humDHT) || isnan(tempDHT))  
  {
    Serial.println("Failed to read from DHT sensor!");
    return;
  }
}
void aplyCmd()
{
  if (pumpStatus == 1)
  {
    Blynk.notify("pump ON");
    digitalWrite(PUMP_PIN, LOW);
    PUMP.on();
    Blynk.notify("Pump ON")
  }

  else {
    digitalWrite(PUMP_PIN, HIGH);
    PUMP.off();
  }
}
void autoControlPlantation(void)
{
  if (soilMoist < DRY_SOIL)
  {
    turnPumpOn();
  }
}
void turnPumpOn()
{
  pumpStatus = 1;
  aplyCmd();
  delay (TIME_PUMP_ON * 1000);
  pumpStatus = 0;
  aplyCmd();
}
void startTimers(void)
{
  timer.setInterval(READ_AIR_DATA_TM * 1000, getDhtData);
  timer.setInterval(READ_SOIL_HUM_TM * 1000, getSoilMoist);
  timer.setInterval(SEND_UP_DATA_TM * 1000, sendUptime);
  timer.setInterval(AUTO_CTRL_TM * 1000, autoControlPlantation);
}
void sendUptime()
{
  Blynk.virtualWrite(1, tempDHT);
  Blynk.virtualWrite(2, humDHT);
  Blynk.virtualWrite(3, soilMoist);

}
void turnPumpoff()
{
  pumpstatus= 0
  applycmd()
  applycmd()
  timer.setInterval(Reaad)
  Blynk.virtualWrite(Read)
  timer.setInterval (READ_AIR_DATA_TM * 1000, getDhtData  )
  timer.setInterval(READ_AIR_DATA_TM)
  Blynk.virtualWrite()
}
